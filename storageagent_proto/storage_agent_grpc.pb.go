// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.1
// source: storage_agent.proto

package storageagent_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageAgentClient is the client API for StorageAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageAgentClient interface {
	CreateImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Image, error)
	DeleteImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Image, error)
}

type storageAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageAgentClient(cc grpc.ClientConnInterface) StorageAgentClient {
	return &storageAgentClient{cc}
}

func (c *storageAgentClient) CreateImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/storageagent.v1.StorageAgent/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageAgentClient) DeleteImage(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/storageagent.v1.StorageAgent/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageAgentServer is the server API for StorageAgent service.
// All implementations must embed UnimplementedStorageAgentServer
// for forward compatibility
type StorageAgentServer interface {
	CreateImage(context.Context, *ImageRequest) (*Image, error)
	DeleteImage(context.Context, *ImageRequest) (*Image, error)
	mustEmbedUnimplementedStorageAgentServer()
}

// UnimplementedStorageAgentServer must be embedded to have forward compatible implementations.
type UnimplementedStorageAgentServer struct {
}

func (UnimplementedStorageAgentServer) CreateImage(context.Context, *ImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (UnimplementedStorageAgentServer) DeleteImage(context.Context, *ImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (UnimplementedStorageAgentServer) mustEmbedUnimplementedStorageAgentServer() {}

// UnsafeStorageAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageAgentServer will
// result in compilation errors.
type UnsafeStorageAgentServer interface {
	mustEmbedUnimplementedStorageAgentServer()
}

func RegisterStorageAgentServer(s grpc.ServiceRegistrar, srv StorageAgentServer) {
	s.RegisterService(&StorageAgent_ServiceDesc, srv)
}

func _StorageAgent_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAgentServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageagent.v1.StorageAgent/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAgentServer).CreateImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageAgent_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageAgentServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageagent.v1.StorageAgent/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageAgentServer).DeleteImage(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageAgent_ServiceDesc is the grpc.ServiceDesc for StorageAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storageagent.v1.StorageAgent",
	HandlerType: (*StorageAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImage",
			Handler:    _StorageAgent_CreateImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _StorageAgent_DeleteImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_agent.proto",
}
